# Example

## Equations 

This is an example file. While you can use equations, I have decided to remove the KaTeX transformer in favor of implementing such things as components.

<Eq>
    \nu Te \mathcal{X}
</Eq>

# Variables

You can define variables within environents like this:
<var myVariable1="Value 1" />
<var myVariable2>Value 2</var>
<var myVariable3>
    <>
        # Fragments
        Define multiple values for variables using fragments.
    </>
</var>
And then use ${myVariable1} like this. Or like this:

${myVariable2}

Variables are scoped within environments. This means you can set different values at different levels without changing the variable in higher scopes.

<div>
    <var myVariable1="Value 3" />
    ${myVariable1}
</div>
${myVariable1}

Variables only work in text right now. Variables are not supported in math or environment attributes.

# Components 

You can define re-usable components like this:

<Component MyComponent>

    # ${heading}

    ${children}

</Component>

And use them afterwards:

<MyComponent heading="Example 1">
    Put anything inside here.
</MyComponent>
<MyComponent heading="Example 2">
    Or something else the second time
</MyComponent>

# Semantics-Dependent Syntax

VTX has semantics-dependent syntax. Component contents (children) are parsed differently depending on the component. By default, contents are parsed as VTX nodes. This will interfere with things like code blocks and equations. To define the syntax within your component, use the "content" attribute when defining your component:

<Component MyRawComponent content="raw">
    ${children}
</Component>

<MyRawComponent>
    VTX-syntax is entirely ignored in here. You can <Open> up tags without closing them and use special characters, such as # $.
</MyRawComponent>

